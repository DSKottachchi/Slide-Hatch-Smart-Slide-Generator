{"ast":null,"code":"/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nmodule.exports = page => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n  page.blocks.forEach(block => {\n    block.paragraphs.forEach(paragraph => {\n      paragraph.lines.forEach(line => {\n        line.words.forEach(word => {\n          word.symbols.forEach(sym => {\n            symbols.push({ ...sym,\n              page,\n              block,\n              paragraph,\n              line,\n              word\n            });\n          });\n          words.push({ ...word,\n            page,\n            block,\n            paragraph,\n            line\n          });\n        });\n        lines.push({ ...line,\n          page,\n          block,\n          paragraph\n        });\n      });\n      paragraphs.push({ ...paragraph,\n        page,\n        block\n      });\n    });\n    blocks.push({ ...block,\n      page\n    });\n  });\n  return { ...page,\n    blocks,\n    paragraphs,\n    lines,\n    words,\n    symbols\n  };\n};","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/node_modules/tesseract.js/src/utils/circularize.js"],"names":["module","exports","page","blocks","paragraphs","lines","words","symbols","forEach","block","paragraph","line","word","sym","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,OAAO,GAAG,EAAhB;AAEAL,EAAAA,IAAI,CAACC,MAAL,CAAYK,OAAZ,CAAqBC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACL,UAAN,CAAiBI,OAAjB,CAA0BE,SAAD,IAAe;AACtCA,MAAAA,SAAS,CAACL,KAAV,CAAgBG,OAAhB,CAAyBG,IAAD,IAAU;AAChCA,QAAAA,IAAI,CAACL,KAAL,CAAWE,OAAX,CAAoBI,IAAD,IAAU;AAC3BA,UAAAA,IAAI,CAACL,OAAL,CAAaC,OAAb,CAAsBK,GAAD,IAAS;AAC5BN,YAAAA,OAAO,CAACO,IAAR,CAAa,EACX,GAAGD,GADQ;AACHX,cAAAA,IADG;AACGO,cAAAA,KADH;AACUC,cAAAA,SADV;AACqBC,cAAAA,IADrB;AAC2BC,cAAAA;AAD3B,aAAb;AAGD,WAJD;AAKAN,UAAAA,KAAK,CAACQ,IAAN,CAAW,EACT,GAAGF,IADM;AACAV,YAAAA,IADA;AACMO,YAAAA,KADN;AACaC,YAAAA,SADb;AACwBC,YAAAA;AADxB,WAAX;AAGD,SATD;AAUAN,QAAAA,KAAK,CAACS,IAAN,CAAW,EACT,GAAGH,IADM;AACAT,UAAAA,IADA;AACMO,UAAAA,KADN;AACaC,UAAAA;AADb,SAAX;AAGD,OAdD;AAeAN,MAAAA,UAAU,CAACU,IAAX,CAAgB,EACd,GAAGJ,SADW;AACAR,QAAAA,IADA;AACMO,QAAAA;AADN,OAAhB;AAGD,KAnBD;AAoBAN,IAAAA,MAAM,CAACW,IAAP,CAAY,EACV,GAAGL,KADO;AACAP,MAAAA;AADA,KAAZ;AAGD,GAxBD;AA0BA,SAAO,EACL,GAAGA,IADE;AACIC,IAAAA,MADJ;AACYC,IAAAA,UADZ;AACwBC,IAAAA,KADxB;AAC+BC,IAAAA,KAD/B;AACsCC,IAAAA;AADtC,GAAP;AAGD,CApCD","sourcesContent":["/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  page.blocks.forEach((block) => {\n    block.paragraphs.forEach((paragraph) => {\n      paragraph.lines.forEach((line) => {\n        line.words.forEach((word) => {\n          word.symbols.forEach((sym) => {\n            symbols.push({\n              ...sym, page, block, paragraph, line, word,\n            });\n          });\n          words.push({\n            ...word, page, block, paragraph, line,\n          });\n        });\n        lines.push({\n          ...line, page, block, paragraph,\n        });\n      });\n      paragraphs.push({\n        ...paragraph, page, block,\n      });\n    });\n    blocks.push({\n      ...block, page,\n    });\n  });\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}