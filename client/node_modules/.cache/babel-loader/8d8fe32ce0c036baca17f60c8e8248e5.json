{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://localhost:5000/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response, err.response));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('http://localhost:5000/api/auth/user', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from local storage\n  const token = getState().auth.token; // Header\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to header\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","register","name","email","password","config","headers","body","JSON","stringify","post","status","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AAEAH,EAAAA,KAAK,CAACc,GAAN,CAAU,qCAAV,EAAiDC,WAAW,CAACH,QAAD,CAA5D,EACKI,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAL,EAAeD,GAAG,CAACC,QAAnB,CAAb,CAAR;AACAX,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAfM,C,CAiBP;;AACA,OAAO,MAAMmB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+Bf,QAAQ,IAAI;AAC/D;AACA,QAAMgB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CAF+D,CAQ/D;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AAEA1B,EAAAA,KAAK,CAACgC,IAAN,CAAW,qCAAX,EAAkDH,IAAlD,EAAwDF,MAAxD,EACKX,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEL,gBADY;AAElBU,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaW,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAtB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAtBM,C,CAwBP;;AACA,OAAO,MAAMM,WAAW,GAAGH,QAAQ,IAAI;AACjC;AACA,QAAMsB,KAAK,GAAGtB,QAAQ,GAAGuB,IAAX,CAAgBD,KAA9B,CAFiC,CAIjC;;AACA,QAAMP,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALiC,CAWjC;;AACA,MAAGM,KAAH,EAAU;AACNP,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCM,KAAjC;AACH;;AAED,SAAOP,MAAP;AACL,CAjBM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';  \nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from \"./types\";\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios.get('http://localhost:5000/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response, err.response));\n            dispatch({\n                type: AUTH_ERROR\n            })\n        }); \n}\n\n//Register User\nexport const register = ({ name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    //Request body\n    const body = JSON.stringify({ name, email, password });\n\n    axios.post('http://localhost:5000/api/auth/user', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        })\n}\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n      // Get token from local storage\n      const token = getState().auth.token;\n\n      // Header\n      const config = {\n          headers: {\n              \"Content-type\": \"application/json\"\n          }\n      }\n  \n      // If token, add to header\n      if(token) {\n          config.headers['x-auth-token'] = token;\n      }\n\n      return config;\n}"]},"metadata":{},"sourceType":"module"}