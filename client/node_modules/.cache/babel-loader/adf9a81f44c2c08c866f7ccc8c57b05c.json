{"ast":null,"code":"/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      fetch(new Request(url, options)).then(function (response) {\n        return response.blob();\n      }).then(callback).catch(function (err) {\n        callback(null, err);\n      });\n    };\n  } else if ( // Check for XHR2 support:\n  typeof XMLHttpRequest !== 'undefined' && typeof ProgressEvent !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      // eslint-disable-next-line no-param-reassign\n      options = options || {};\n      var req = new XMLHttpRequest();\n      req.open(options.method || 'GET', url);\n\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          req.setRequestHeader(key, options.headers[key]);\n        });\n      }\n\n      req.withCredentials = options.credentials === 'include';\n      req.responseType = 'blob';\n\n      req.onload = function () {\n        callback(req.response);\n      };\n\n      req.onerror = req.onabort = req.ontimeout = function (err) {\n        callback(null, err);\n      };\n\n      req.send(options.body);\n    };\n  }\n});","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/node_modules/blueimp-load-image/js/load-image-fetch.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","fetch","Request","fetchBlob","url","callback","options","then","response","blob","catch","err","XMLHttpRequest","ProgressEvent","req","open","method","headers","Object","keys","forEach","key","setRequestHeader","withCredentials","credentials","responseType","onload","onerror","onabort","ontimeout","send","body"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAAC,CAAC,UAAUA,OAAV,EAAmB;AACnB;;AACA,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,CAAC,cAAD,CAAD,EAAmBD,OAAnB,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvDJ,IAAAA,OAAO,CAACK,OAAO,CAAC,cAAD,CAAR,CAAP;AACD,GAFM,MAEA;AACL;AACAL,IAAAA,OAAO,CAACM,MAAM,CAACC,SAAR,CAAP;AACD;AACF,CAXA,EAWE,UAAUA,SAAV,EAAqB;AACtB;;AAEA,MAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgC,OAAOC,OAAP,KAAmB,WAAvD,EAAoE;AAClEF,IAAAA,SAAS,CAACG,SAAV,GAAsB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACtDL,MAAAA,KAAK,CAAC,IAAIC,OAAJ,CAAYE,GAAZ,EAAiBE,OAAjB,CAAD,CAAL,CACGC,IADH,CACQ,UAAUC,QAAV,EAAoB;AACxB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQF,QAJR,EAKGK,KALH,CAKS,UAAUC,GAAV,EAAe;AACpBN,QAAAA,QAAQ,CAAC,IAAD,EAAOM,GAAP,CAAR;AACD,OAPH;AAQD,KATD;AAUD,GAXD,MAWO,KACL;AACA,SAAOC,cAAP,KAA0B,WAA1B,IACA,OAAOC,aAAP,KAAyB,WAHpB,EAIL;AACAb,IAAAA,SAAS,CAACG,SAAV,GAAsB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACtD;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAIQ,GAAG,GAAG,IAAIF,cAAJ,EAAV;AACAE,MAAAA,GAAG,CAACC,IAAJ,CAAST,OAAO,CAACU,MAAR,IAAkB,KAA3B,EAAkCZ,GAAlC;;AACA,UAAIE,OAAO,CAACW,OAAZ,EAAqB;AACnBC,QAAAA,MAAM,CAACC,IAAP,CAAYb,OAAO,CAACW,OAApB,EAA6BG,OAA7B,CAAqC,UAAUC,GAAV,EAAe;AAClDP,UAAAA,GAAG,CAACQ,gBAAJ,CAAqBD,GAArB,EAA0Bf,OAAO,CAACW,OAAR,CAAgBI,GAAhB,CAA1B;AACD,SAFD;AAGD;;AACDP,MAAAA,GAAG,CAACS,eAAJ,GAAsBjB,OAAO,CAACkB,WAAR,KAAwB,SAA9C;AACAV,MAAAA,GAAG,CAACW,YAAJ,GAAmB,MAAnB;;AACAX,MAAAA,GAAG,CAACY,MAAJ,GAAa,YAAY;AACvBrB,QAAAA,QAAQ,CAACS,GAAG,CAACN,QAAL,CAAR;AACD,OAFD;;AAGAM,MAAAA,GAAG,CAACa,OAAJ,GAAcb,GAAG,CAACc,OAAJ,GAAcd,GAAG,CAACe,SAAJ,GAAgB,UAAUlB,GAAV,EAAe;AACzDN,QAAAA,QAAQ,CAAC,IAAD,EAAOM,GAAP,CAAR;AACD,OAFD;;AAGAG,MAAAA,GAAG,CAACgB,IAAJ,CAASxB,OAAO,CAACyB,IAAjB;AACD,KAnBD;AAoBD;AACF,CAnDA","sourcesContent":["/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      fetch(new Request(url, options))\n        .then(function (response) {\n          return response.blob()\n        })\n        .then(callback)\n        .catch(function (err) {\n          callback(null, err)\n        })\n    }\n  } else if (\n    // Check for XHR2 support:\n    typeof XMLHttpRequest !== 'undefined' &&\n    typeof ProgressEvent !== 'undefined'\n  ) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      // eslint-disable-next-line no-param-reassign\n      options = options || {}\n      var req = new XMLHttpRequest()\n      req.open(options.method || 'GET', url)\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          req.setRequestHeader(key, options.headers[key])\n        })\n      }\n      req.withCredentials = options.credentials === 'include'\n      req.responseType = 'blob'\n      req.onload = function () {\n        callback(req.response)\n      }\n      req.onerror = req.onabort = req.ontimeout = function (err) {\n        callback(null, err)\n      }\n      req.send(options.body)\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}