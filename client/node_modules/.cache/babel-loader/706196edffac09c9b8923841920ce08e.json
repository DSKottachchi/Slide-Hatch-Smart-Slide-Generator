{"ast":null,"code":"const createJob = require('./createJob');\n\nconst {\n  log\n} = require('./utils/log');\n\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => new Promise((resolve, reject) => {\n    const job = createJob({\n      action,\n      payload\n    });\n    jobQueue.push(async w => {\n      jobQueue.shift();\n      runningWorkers[w.id] = job;\n\n      try {\n        resolve(await w[action].apply(this, [...payload, job.id]));\n      } catch (err) {\n        reject(err);\n      } finally {\n        delete runningWorkers[w.id];\n        dequeue();\n      }\n    });\n    log(`[${id}]: Add ${job.id} to JobQueue`);\n    log(`[${id}]: JobQueue length=${jobQueue.length}`);\n    dequeue();\n  });\n\n  const addWorker = w => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async wid => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers\n  };\n};","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/node_modules/tesseract.js/src/createScheduler.js"],"names":["createJob","require","log","getId","schedulerCounter","module","exports","id","workers","runningWorkers","jobQueue","getQueueLen","length","getNumWorkers","Object","keys","dequeue","wIds","i","queue","action","payload","Promise","resolve","reject","job","push","w","shift","apply","err","addWorker","addJob","Error","terminate","forEach","wid"],"mappings":"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","sourcesContent":["const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}