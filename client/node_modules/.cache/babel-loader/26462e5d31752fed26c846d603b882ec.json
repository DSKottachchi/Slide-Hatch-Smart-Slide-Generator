{"ast":null,"code":"const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage(langs);\n  await worker.initialize(langs);\n  return worker.recognize(image).finally(async () => {\n    await worker.terminate();\n  });\n};\n\nconst detect = async (image, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage('osd');\n  await worker.initialize('osd');\n  return worker.detect(image).finally(async () => {\n    await worker.terminate();\n  });\n};\n\nmodule.exports = {\n  recognize,\n  detect\n};","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/node_modules/tesseract.js/src/Tesseract.js"],"names":["createWorker","require","recognize","image","langs","options","worker","load","loadLanguage","initialize","finally","terminate","detect","module","exports"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,SAAS,GAAG,OAAOC,KAAP,EAAcC,KAAd,EAAqBC,OAArB,KAAiC;AACjD,QAAMC,MAAM,GAAGN,YAAY,CAACK,OAAD,CAA3B;AACA,QAAMC,MAAM,CAACC,IAAP,EAAN;AACA,QAAMD,MAAM,CAACE,YAAP,CAAoBJ,KAApB,CAAN;AACA,QAAME,MAAM,CAACG,UAAP,CAAkBL,KAAlB,CAAN;AACA,SAAOE,MAAM,CAACJ,SAAP,CAAiBC,KAAjB,EACJO,OADI,CACI,YAAY;AACnB,UAAMJ,MAAM,CAACK,SAAP,EAAN;AACD,GAHI,CAAP;AAID,CATD;;AAWA,MAAMC,MAAM,GAAG,OAAOT,KAAP,EAAcE,OAAd,KAA0B;AACvC,QAAMC,MAAM,GAAGN,YAAY,CAACK,OAAD,CAA3B;AACA,QAAMC,MAAM,CAACC,IAAP,EAAN;AACA,QAAMD,MAAM,CAACE,YAAP,CAAoB,KAApB,CAAN;AACA,QAAMF,MAAM,CAACG,UAAP,CAAkB,KAAlB,CAAN;AACA,SAAOH,MAAM,CAACM,MAAP,CAAcT,KAAd,EACJO,OADI,CACI,YAAY;AACnB,UAAMJ,MAAM,CAACK,SAAP,EAAN;AACD,GAHI,CAAP;AAID,CATD;;AAWAE,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,SADe;AAEfU,EAAAA;AAFe,CAAjB","sourcesContent":["const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage(langs);\n  await worker.initialize(langs);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = createWorker(options);\n  await worker.load();\n  await worker.loadLanguage('osd');\n  await worker.initialize('osd');\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n"]},"metadata":{},"sourceType":"script"}