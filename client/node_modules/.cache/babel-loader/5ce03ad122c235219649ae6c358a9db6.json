{"ast":null,"code":"const resolveURL = require('resolve-url');\n\nconst blueimpLoadImage = require('blueimp-load-image');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = ({\n    target: {\n      error: {\n        code\n      }\n    }\n  }) => {\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nconst fixOrientationFromUrlOrBlobOrFile = blob => new Promise(resolve => {\n  blueimpLoadImage(blob, img => img.toBlob(resolve), {\n    orientation: true,\n    canvas: true\n  });\n});\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nconst loadImage = async image => {\n  let data = image;\n\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    if (image.endsWith('.pbm')) {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    } else {\n      let img = image; // If not Base64 Image\n\n      if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n        img = resolveURL(image);\n      }\n\n      data = await readFromBlobOrFile(await fixOrientationFromUrlOrBlobOrFile(img));\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n\n    if (image.tagName === 'CANVAS') {\n      await new Promise(resolve => {\n        image.toBlob(async blob => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    let img = image;\n\n    if (!image.name.endsWith('.pbm')) {\n      img = await fixOrientationFromUrlOrBlobOrFile(img);\n    }\n\n    data = await readFromBlobOrFile(img);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;","map":{"version":3,"sources":["/Users/dilmikottachchi/Documents/Final Year Research Project/slide-generator-web/client/node_modules/tesseract.js/src/worker/browser/loadImage.js"],"names":["resolveURL","require","blueimpLoadImage","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","fixOrientationFromUrlOrBlobOrFile","img","toBlob","orientation","canvas","loadImage","image","data","endsWith","resp","fetch","arrayBuffer","test","HTMLElement","tagName","src","poster","File","Blob","name","Uint8Array","module","exports"],"mappings":"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","sourcesContent":["const resolveURL = require('resolve-url');\nconst blueimpLoadImage = require('blueimp-load-image');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nconst fixOrientationFromUrlOrBlobOrFile = (blob) => (\n  new Promise((resolve) => {\n    blueimpLoadImage(\n      blob,\n      (img) => img.toBlob(resolve),\n      {\n        orientation: true,\n        canvas: true,\n      },\n    );\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    if (image.endsWith('.pbm')) {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    } else {\n      let img = image;\n      // If not Base64 Image\n      if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n        img = resolveURL(image);\n      }\n      data = await readFromBlobOrFile(\n        await fixOrientationFromUrlOrBlobOrFile(img),\n      );\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    let img = image;\n    if (!image.name.endsWith('.pbm')) {\n      img = await fixOrientationFromUrlOrBlobOrFile(img);\n    }\n    data = await readFromBlobOrFile(img);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n"]},"metadata":{},"sourceType":"script"}